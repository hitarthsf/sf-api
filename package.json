{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "start": "docker-compose up",
    "start-no-docker": "node index.js",
    "dev": "nodemon index.js",
    "build": "npm run build-api",
    "build-api": "source .env && cross-var docker build -t ${AWS_REPO_NAME}:latest .",
    "build-nginx": "source .env && cross-var docker build -t ${AWS_REPO_NAME_NGINX}:latest ./nginx",
    "build-and-push": "npm run build-api && npm run ecr-tag-api && npm run ecr-push-api",
    "test-env-var": "echo ${PORT}",
    "stop": "docker-compose down -v",
    "docker-remove-volumes": "docker-compose rm -vf",
    "docker-pull": "source .env && cross-var docker pull ${AWS_USER}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_REPO_NAME}",
    "ecr-create-repos": "npm run ecr-create-api && npm run ecr-create-nginx",
    "ecr-create-api": "source .env && cross-var aws ecr create-repository --profile ${AWS_PROFILE} --repository-name ${AWS_REPO_NAME} --image-scanning-configuration scanOnPush=true --region ${AWS_REGION}",
    "ecr-create-nginx": "source .env && cross-var aws ecr create-repository --profile ${AWS_PROFILE} --repository-name ${AWS_REPO_NAME_NGINX} --image-scanning-configuration scanOnPush=true --region ${AWS_REGION}",
    "ecr-tag-repos": "npm run ecr-tag-api && npm run ecr-tag-nginx",
    "ecr-tag-api": "source .env && cross-var docker tag ${AWS_REPO_NAME}:latest ${AWS_USER}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_REPO_NAME}:latest",
    "ecr-tag-nginx": "source .env && cross-var docker tag ${AWS_REPO_NAME_NGINX}:latest ${AWS_USER}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_REPO_NAME_NGINX}:latest",
    "ecr-push-repos": "npm run ecr-push-api && npm run ecr-push-nginx",
    "ecr-push-api": "npm run ecr-login && source .env && cross-var docker push ${AWS_USER}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_REPO_NAME}:latest",
    "ecr-push-nginx": "npm run ecr-login && source .env && cross-var docker push ${AWS_USER}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_REPO_NAME_NGINX}:latest",
    "ecr-login": "source .env && cross-var aws ecr get-login-password --profile ${AWS_PROFILE} --region ${AWS_REGION} | cross-var docker login --username AWS --password-stdin ${AWS_USER}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_REPO_NAME}",
    "ecs-configure": "source .env && cross-var ecs-cli configure --cluster ${AWS_CLUSTER_NAME} --region ${AWS_REGION} --default-launch-type FARGATE --config-name ${AWS_CLUSTER_NAME}",
    "ecs-create-cluster": "source .env && cross-var ecs-cli up --cluster-config ${AWS_CLUSTER_NAME} --ecs-profile ${AWS_CLUSTER_NAME}",
    "aws-view-security group": "aws ec2 describe-security-groups --filters Name=vpc-id,Values=vpc-022ace733ed4f64e3",
    "aws-enable-traffic": "aws ec2 authorize-security-group-ingress --group-id sg-0c0141caeaba71e6f --protocol tcp --port 80 --cidr 0.0.0.0/0",
    "ecs-up": "source .env && cross-var ecs-cli compose --project-name ${AWS_CLUSTER_NAME} service up --create-log-groups --cluster-config ${AWS_CLUSTER_NAME} --ecs-profile ${AWS_CLUSTER_NAME} --private-dns-namespace sf-network --enable-service-discovery",
    "ecs-down": "source .env && cross-var ecs-cli compose service rm ${AWS_CLUSTER_NAME} --cluster-config ${AWS_CLUSTER_NAME} --ecs-profile ${AWS_CLUSTER_NAME}",
    "ecs-list": "source .env && cross-var ecs-cli compose --project-name ${AWS_CLUSTER_NAME} service ps --cluster-config ${AWS_CLUSTER_NAME} --ecs-profile ${AWS_CLUSTER_NAME}",
    "tf-create-s3-backend": "source .env && cross-var aws s3api create-bucket --bucket $TF_VAR_remote_backend --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION && cross-var aws s3api put-bucket-versioning --bucket $TF_VAR_remote_backend --versioning-configuration Status=Enabled"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "aws-sdk": "^2.991.0",
    "bcrypt": "^5.0.1",
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.19.0",
    "cors": "^2.8.5",
    "dotenv": "^10.0.0",
    "email-templates": "^8.0.8",
    "express": "^4.17.1",
    "express-fileupload": "^1.2.1",
    "global": "^4.4.0",
    "jsonwebtoken": "8.5.1",
    "lodash": "^4.17.21",
    "moment": "^2.29.1",
    "mongoose": "^5.12.12",
    "multer": "^1.4.3",
    "multer-s3": "^2.10.0",
    "mysql": "^2.18.1",
    "mysql2": "^2.3.0",
    "nodemailer": "^6.7.2",
    "nodemailer-express-handlebars": "^4.0.0",
    "nodemon": "^2.0.7",
    "passport": "0.4.1",
    "passport-jwt": "4.0.0",
    "passport-local": "1.0.0",
    "pug": "^3.0.2",
    "qr-image": "^3.2.0",
    "qrcode": "^1.5.0"
  },
  "devDependencies": {
    "cross-var": "^1.1.0"
  }
}
